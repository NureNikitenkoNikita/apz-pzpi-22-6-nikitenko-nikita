ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра «Програмної інженерії»
Звіт
з лабораторної роботи №2
з дисципліни «Архітектура програмного забезпечення»

Виконав:
ст.гр. ПЗПІ-22-6 
Нікітенко Нікіта Юрійович

Перевірив роботу:
ст. викладач катедри ПІ
Сокорчук Ігор Петрович


Харків 2025

1 ІСТОРІЯ ЗМІН

№
	Дата
	Версія звіту
	Опис змін
	1
	27.05.2025
	0.1
	Створено розділ “Історія змін”
	2
	27.05.2025
	0.1
	Створено розділ “Завдання”
	3
	27.05.2025
	0.1
	Створено розділ “Опис виконаної роботи”
	4
	27.05.2025
	0.1
	Створено розділ “Висновки”
	5
	01.06.2025
	0.2
	Доданий Додаток А
	6
	01.06.2025
	0.2
	Доданий Додаток Б
	7
	01.06.2025
	0.2
	Доданий Додаток В
	





2 ЗАВДАННЯ
Потрібно розробити серверну / back-end частину програмної системи.
Проаналізуйте завдання (додаток В).
Виконайте контрольні завдання.
Відкрийте створений на попередній лабораторній роботі репозиторій GitHub.
Створіть у репозиторії директорію Task2 та текстовий файл з описом інженерних рішень у цій частині проєкту.
Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті.
Створіть у директорії Task2 піддиректорію для програмного коду.
Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни. Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7-10 хвилин з усними поясненнями процесу тестування.
Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
Створіть для завантаженого запису його хронологічний опис.
Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.


3 ОПИС ВИКОНАНОЇ РОБОТИ
Програмна система має клієнт-серверну архітектуру. Серверна частина реалізована за допомогою фреймворку FastAPI на мові програмування Python. Для збереження даних використовується база даних MariaDB. Автентифікація користувачів відбувається через JWT токени.
Серверна частина складається з наступних модулів:
1. Авторизація: вхід та реєстрація користувачів;
2. Керування профілями користувачів: перегляд та редагування інформації користувачів;
3. Керування користувацькими IoT-сенсорами: додавання, редагування, перегляд та видалення системних та користувацьких IoT-серсорів;
4. Сбір даних з IoT-серсорів: отримання та обробка погодних даних з  IoT-пристроїв;
5. Прогнозування погоди: отримання прогнозва погоди для конкретного міста або IoT-сенсера;
6. Адміністрування: перегляд, редагування та видалення інформації про користувачів,  IoT-серсори та погодні виміри.
На рисунках Б.1-Б.4 у додатку Б наведені UML діаграми прецедентів.
На рисунку Б.4 у додатку Б наведена діаграма розгортання.
На рисунку Б.5 у додатку Б наведена діаграмма компонентів.
На рисунку Б.6 у додатку Б наведена ER-діаграма.


Опис бази даних програмної системи описаний в таблицях 1-3.

Таблиця 1 - Таблиця бази даних “disasters”


id
	BIGINT PRIMARY KEY
	type
	VARCHAR(255)
	latitude
	DOUBLE PRECISION
	longitude
	DOUBLE PRECISION
	severity
	INTEGER
	createdAt
	TIMESTAMP WITH TIME ZONE
	updatedAt
	TIMESTAMP WITH TIME ZONE
	status
	VARCHAR(255)
	path
	POINTS
	
Таблиця 2 - Таблиця бази даних “users”


id
	INTEGER PRIMARY KEY
	username
	VARCHAR(255)
	password
	VARCHAR(255)
	createdAt
	TIMESTAMP WITH TIME ZONE
	updatedAt
	TIMESTAMP WITH TIME ZONE
	

Таблиця 3 - Таблиця бази даних “SensorData”

id
	INTEGER PRIMARY KEY
	type
	VARCHAR(255)
	value
	DOUBLE PRECISION
	unit
	VARCHAR(255)
	latitude
	DOUBLE PRECISION
	longitude
	DOUBLE PRECISION
	disasterId
	INTEGER
	createdAt
	TIMESTAMP WITH TIME ZONE
	updatedAt
	TIMESTAMP WITH TIME ZONE
	details
	JSONB
	

Таблиця 4 - Таблиця бази даних “SequelizeMeta”

name
	VARCHAR(255)
	


Таблиця 5 - Специфікація API

POST
	/auth/register
	Регістрація користувачів
	POST
	/auth/login
	Авторизація користувачів
	POST
	/auth/logout
	Вихід користувачів з аккаунту
	GET
	/api/disasters
	Отримання всіх катастроф
	GET
	/api/disasters?period=3d
	Отримання катастроф за 3 дні
	GET
	/api/disasters?period=7d
	Отримання катастроф за 7 днів
	GET
	/api/sensors
	Отримання останніх показників сенсорів
	GET
	/disaster/id
	Отримання даних сенсорів, пов'язаних з конкретною катастрофою
	

4 ВИСНОВКИ
Під час виконання лабораторної роботи було роброблено серверну частину програмної системи.



Посилання на YouTube відео: https://youtu.be/WyFS0iWUjAk
Посилання на GitHub репозиторій: https://github.com/NureNikitenkoNikita/apz-pzpi-22-6-nikitenko-nikita


*Хронологія відео:

00:10 - Схема БД
00:21 - запит на реєстрацію користувача
00:50 - запит на вхід користувача
01:15 -  запит на отримання всіх катастроф
01:45 -  запит на отримання всіх катастроф за останні 3 дні
02:02 -  запит на отримання всіх катастроф за останні 7 дні
02:25 -  запит на отримання схожих катастроф
03:00 -  запит на отримання сенсорів




ДОДАТОК Б

Рисунок Б.1 - UML діаграму прецедентів взаємодії адміністратора з системою

Рисунок Б.2 - UML діаграма прецедентів взаємодії користувачів з системою

Рисунок Б.3 - UML діаграма прецедентів взаємодії IoT-пристою з 
системою

Рисунок Б.4 - UML діаграма розгортання

Рисунок Б.5 - UML діаграма компонентів

Рисунок Б.6 - ER діаграма даних






ДОДАТОК В

В.1  - реалізація авторизації користовача
GitHub репозиторій: apz-pzpi-22-6-nikitenko-nikita/Lab2/apz-pzpi-22-6-nikitenko-nikita-lab2/controllers/authController.js at main · NureNikitenkoNikita/apz-pzpi-22-6-nikitenko-nikita · GitHub


const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { User } = require('../models');


exports.register = async (req, res) => {
  try {
    const { username, password } = req.body;
    if (!username || !password) {
      return res.status(400).json({ message: 'Username and password are required' });
    }
    const hashedPassword = await bcrypt.hash(password, 12);
    const newUser = await User.create({ username, password: hashedPassword });
    res.status(201).json({ message: 'User created successfully', userId: newUser.id });
  } catch (error) {
    res.status(500).json({ message: 'Error registering new user', error: error.message });
  }
};


exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ where: { username } });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }
    const token = jwt.sign({ id: user.id, username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ token, userId: user.id });
  } catch (error) {
    res.status(500).json({ message: 'Error logging in', error: error.message });
  }
};


В.2  - методи отримання даних про катастрофи
GitHub репозиторій: 
apz-pzpi-22-6-nikitenko-nikita/Lab2/apz-pzpi-22-6-nikitenko-nikita-lab2/controllers/disasterController.js at main · NureNikitenkoNikita/apz-pzpi-22-6-nikitenko-nikita · GitHub


const { Disaster } = require('../models');
const { Op, Sequelize } = require('sequelize');


// Метод для отримання всіх катастроф
exports.getAllDisasters = async (req, res) => {
  try {
    const { period = 'all' } = req.query;
    let whereClause = {};


    if (period !== 'all') {
        const days = parseInt(period.replace('d', ''));
        const date = new Date();
        date.setDate(date.getDate() - days);
        whereClause.createdAt = { [Op.gte]: date };
    }
   
    const disasters = await Disaster.findAll({
      where: whereClause,
      order: [['createdAt', 'DESC']],
    });
    res.json(disasters);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching disasters', error });
  }
};


// Метод для пошуку схожих подій
exports.getSimilarDisasters = async (req, res) => {
    try {
        const { id } = req.params;
        const originalDisaster = await Disaster.findByPk(id);


        if (!originalDisaster) {
            return res.status(404).json({ message: 'Disaster not found' });
        }


        const { type, latitude, longitude } = originalDisaster;
        const radiusDegrees = 5; // Шукаємо в радіусі ~5 градусів широти/довготи


        const similarDisasters = await Disaster.findAll({
            where: {
                id: { [Op.ne]: id }, // Виключаємо поточну катастрофу
                type: type,
                latitude: {
                    [Op.between]: [latitude - radiusDegrees, latitude + radiusDegrees]
                },
                longitude: {
                    [Op.between]: [longitude - radiusDegrees, longitude + radiusDegrees]
                }
            },
            order: [['createdAt', 'DESC']],
            limit: 5
        });


        res.json(similarDisasters);


    } catch (error) {
        res.status(500).json({ message: 'Error fetching similar disasters', error });
    }
};


В.3  - роути на сенсори
apz-pzpi-22-6-nikitenko-nikita/Lab2/apz-pzpi-22-6-nikitenko-nikita-lab2/routes/sensors.js at main · NureNikitenkoNikita/apz-pzpi-22-6-nikitenko-nikita · GitHub




const express = require('express');
const router = express.Router();
const sensorController = require('../controllers/sensorController');


router.get('/', sensorController.getAllSensorData);
router.get('/disaster/:disasterId', sensorController.getSensorDataForDisaster);


module.exports = router;