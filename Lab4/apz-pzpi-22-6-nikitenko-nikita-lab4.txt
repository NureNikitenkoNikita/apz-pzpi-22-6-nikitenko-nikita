ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра «Програмної інженерії»
Звіт
з лабораторної роботи №4
з дисципліни «Архітектура програмного забезпечення»


Виконав:
ст.гр. ПЗПІ-22-6 
Нікітенко Нікіта Юрійович


Перевірив роботу:
ст. викладач катедри ПІ
Сокорчук Ігор Петрович



1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін
	1
	27.05.2025
	0.1
	Створено розділ “Історія змін”
	2
	27.05.2025
	0.1
	Створено розділ “Завдання”
	3
	27.05.2025
	0.1
	Створено розділ “Опис виконаної роботи”
	4
	27.05.2025
	0.1
	Створено розділ “Висновки”
	5
	01.06.2025
	0.2
	Доданий Додаток А
	6
	01.06.2025
	0.2
	Доданий Додаток Б
	7
	01.06.2025
	0.2
	Доданий Додаток В
	

2 ЗАВДАННЯ
Необхідно розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи.
Проаналізуйте завдання.
Виконайте контрольні завдання.
Відкрийте створений на попередній лабораторній роботі репозиторій GitHub.
Створіть у репозиторії директорію Task5 та текстовий файл з описом інженерних рішень у цій частині проєкту, як вказано у додатку З
Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті.
Створіть у директорії Task5 піддиректорію для програмного коду, як вказано у додатку З
Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни
Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7..10 хвилин з усними поясненнями процесу тестування
Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
Створіть для завантаженого запису його хронологічний опис.
Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.


3 ОПИС ВИКОНАНОЇ РОБОТИ
Програмне забезпечення мобільний програмний застосунок для платформи Android розроблено на мові програмування Kotlin та з використанням фреймворку Jetpack Compose, бібліотек Retrofit2 для api запитів, Jackson для роботи з Json. Програмне забезпечення отримує користувацькі пристрої, їх вимірювання та прогнози погоди з серверу. Автентифікація реалізована за допомогою JWT-токенів, які перевіряються а сервері при кожному запиті.
На рисунку Б.1 у додатку Б наведена UML діаграма прецедентів.
На рисунку Б.2 у додатку Б наведена діаграма компонентів.
На рисунку Б.3 у додатку Б наведена діаграма взаємодії.
На рисунку Б.4 у додатку Б наведена діаграма станів.



4 ВИСНОВКИ
Під час виконання лабораторної роботи було розроблено мобільний програмний застосунок для Android.


Додаток А
Графічні матеріали

Рисунок Б.1 - UML діаграма прецедентів

Рисунок Б.2 - Діаграма компонентів

Рисунок Б.3 - Діаграма взаємодії

Рисунок Б.4 - Діаграма станів


Додаток Б
Програмний код

В.1 Математична обробка прикладних даних


// Метод для пошуку схожих подій
exports.getSimilarDisasters = async (req, res) => {
    try {
        const { id } = req.params;
        const originalDisaster = await Disaster.findByPk(id);


        if (!originalDisaster) {
            return res.status(404).json({ message: 'Disaster not found' });
        }


        const { type, latitude, longitude } = originalDisaster;
        const radiusDegrees = 5; // Шукаємо в радіусі ~5 градусів широти/довготи


        const similarDisasters = await Disaster.findAll({
            where: {
                id: { [Op.ne]: id }, // Виключаємо поточну катастрофу
                type: type,
                latitude: {
                    [Op.between]: [latitude - radiusDegrees, latitude + radiusDegrees]
                },
                longitude: {
                    [Op.between]: [longitude - radiusDegrees, longitude + radiusDegrees]
                }
            },
            order: [['createdAt', 'DESC']],
            limit: 5
        });
        res.json(similarDisasters);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching similar disasters', error });
    }
};