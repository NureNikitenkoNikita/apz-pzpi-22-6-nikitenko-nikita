Тема: Патерни проєктування програмного
забезпечення

Дисципліна:
ПЗП1:АПЗ2:2024/25

Виконав: Нікітенко Нікіта Юрійович
ст.гр. ПЗПІ-22-6

Посилання на YouTube: https://youtu.be/xoRlZi_mw-A 


*Вступ до патернів проєктування

Визначення: Патерни проєктування — це типові рішення для поширених проблем у розробці програмного забезпечення.

Мета: Забезпечення повторного використання коду, гнучкості та масштабованості програм.


*Класифікація патернів:

Породжувальні (Creational)
Структурні (Structural)
Поведінкові (Behavioral)


*Породжувальні патерни

Опис: Використовуються для створення об’єктів у спосіб, що забезпечує гнучкість та ізоляцію процесу створення.

Приклади патернів:

Factory Method: Визначає інтерфейс для створення об’єктів, дозволяючи підкласам вирішувати, який клас створювати.
Abstract Factory: Створює сімейства пов’язаних об’єктів без вказівки їхніх конкретних класів.
Builder: Відокремлює створення складного об’єкта від його представлення.


*Структурні патерни

Опис: Допомагають організувати об’єкти та класи в більші структури, зберігаючи гнучкість і ефективність.

Приклади патернів:

Adapter: Дозволяє об’єктам із несумісними інтерфейсами працювати разом.
Decorator: Динамічно додає обов’язки об’єкту.
Facade: Надає спрощений інтерфейс до складної підсистеми.


*Поведінкові патерни
Опис: Сприяють ефективній взаємодії між об’єктами, визначаючи способи їхньої комунікації.



Приклади патернів:

Observer: Визначає залежність «один до багатьох» між об’єктами.
Strategy: Дозволяє визначити сімейство алгоритмів і зробити їх взаємозамінними.
Command: Інкапсулює запит у вигляді об’єкта, дозволяючи передавати його як параметр.


*Приклад: Патерн Factory Method

Проблема: Потреба створювати об’єкти без вказівки конкретного класу.
Рішення: Визначення інтерфейсу для створення об’єктів, де підкласи реалізують створення.
Приклад коду:

class Product:
    def operation(self):
        pass

class ConcreteProductA(Product):
    def operation(self):
        return "Результат продукту A"

class Creator:
    def factory_method(self):
        pass

class ConcreteCreatorA(Creator):
    def factory_method(self):
        return ConcreteProductA()



        
        
*Приклад: Патерн Observer

Проблема: Необхідність сповіщення кількох об’єктів про зміну стану іншого об’єкта.

Рішення: Визначення залежності між суб’єктом і спостерігачами, які автоматично оновлюються.

Приклад коду:

class Subject:
    def __init__(self):
        self._observers = []
    def attach(self, observer):
        self._observers.append(observer)
    def notify(self):
        for observer in self._observers:
            observer.update()

class Observer:
    def update(self):
        pass




*Переваги та недоліки патернів

Переваги:
Покращення структури коду.
Спрощення масштабування та підтримки.
Повторне використання перевірених рішень.



Недоліки:
Збільшення складності для невеликих проєктів.
Потреба в додатковому вивченні та розумінні.



Висновки
Патерни проєктування є важливим інструментом для створення гнучких і масштабованих систем.
Вони допомагають уникнути типових помилок у розробці ПЗ.
Важливо обирати патерн, який відповідає конкретній задачі, щоб уникнути надмірної складності.



Джерела
Гамма Е., Хелм Р., Джонсон Р., Влісідес Дж. «ООП. Патерни проєктування».