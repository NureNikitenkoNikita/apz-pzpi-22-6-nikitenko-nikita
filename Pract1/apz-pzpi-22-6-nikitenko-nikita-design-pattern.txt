МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра Програмної інженерії



ЗВІТ
З дисципліни «Архітектура програмного забезпечення»
З практичної роботи №1
На тему: «Патерни проєктування»

Виконав: 										   Перевірив:
Ст. гр. ПЗПІ-22-6 							      Ст. вик. каф. ПІ
Нікітенко Н.Ю 								        Сокорчук І. П.


Харків 2025
1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1
Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін
1	01.06.2025	0.1	Створено розділ «Історія змін»
2	01.06.2025	0.1	Створено розділ «Завдання»
3	01.06.2025	0.1	Створено розділ “Опис виконаної роботи”
4	01.06.2025	0.1	Створено розділ “Висновки”


2 ЗАВДАННЯ
Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ».
Створити та оформити слайди презентації доповіді.
Створити та опублікувати на YouTube відеозапис доповіді.
Оформити та завантажити на dl.nure.ua звіт до виконаної роботи.
При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua.
Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main.
Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань.
Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub.
Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1.


3 ОПИС ВИКОНАНОЇ РОБОТИ
*Вступ до патернів проєктування
Визначення: Патерни проєктування — це типові рішення для поширених проблем у розробці програмного забезпечення.
Мета: Забезпечення повторного використання коду, гнучкості та масштабованості програм.


*Класифікація патернів:

Породжувальні (Creational)
Структурні (Structural)
Поведінкові (Behavioral)


*Породжувальні патерни
Опис: Використовуються для створення об’єктів у спосіб, що забезпечує гнучкість та ізоляцію процесу створення.
Приклади патернів:

Factory Method: Визначає інтерфейс для створення об’єктів, дозволяючи підкласам вирішувати, який клас створювати.
Abstract Factory: Створює сімейства пов’язаних об’єктів без вказівки їхніх конкретних класів.
Builder: Відокремлює створення складного об’єкта від його представлення.


*Структурні патерни
Опис: Допомагають організувати об’єкти та класи в більші структури, зберігаючи гнучкість і ефективність.
Приклади патернів:

Adapter: Дозволяє об’єктам із несумісними інтерфейсами працювати разом.
Decorator: Динамічно додає обов’язки об’єкту.
Facade: Надає спрощений інтерфейс до складної підсистеми.


*Поведінкові патерни
Опис: Сприяють ефективній взаємодії між об’єктами, визначаючи способи їхньої комунікації.
Приклади патернів:

Observer: Визначає залежність «один до багатьох» між об’єктами.
Strategy: Дозволяє визначити сімейство алгоритмів і зробити їх взаємозамінними.
Command: Інкапсулює запит у вигляді об’єкта, дозволяючи передавати його як параметр.


*Приклад: Патерн Factory Method

Проблема: Потреба створювати об’єкти без вказівки конкретного класу.
Рішення: Визначення інтерфейсу для створення об’єктів, де підкласи реалізують створення.
Приклад коду:

class Product:
    def operation(self):
        pass

class ConcreteProductA(Product):
    def operation(self):
        return "Результат продукту A"

class Creator:
    def factory_method(self):
        pass

class ConcreteCreatorA(Creator):
    def factory_method(self):
        return ConcreteProductA()



        
        
*Приклад: Патерн Observer

Проблема: Необхідність сповіщення кількох об’єктів про зміну стану іншого об’єкта.

Рішення: Визначення залежності між суб’єктом і спостерігачами, які автоматично оновлюються.

Приклад коду:

class Subject:
    def __init__(self):
        self._observers = []
    def attach(self, observer):
        self._observers.append(observer)
    def notify(self):
        for observer in self._observers:
            observer.update()

class Observer:
    def update(self):
        pass




*Переваги та недоліки патернів

Переваги:
Покращення структури коду.
Спрощення масштабування та підтримки.
Повторне використання перевірених рішень.



Недоліки:
Збільшення складності для невеликих проєктів.
Потреба в додатковому вивченні та розумінні.



4 ВИСНОВКИ
Патерни проєктування є важливим інструментом для створення гнучких і масштабованих систем.
Вони допомагають уникнути типових помилок у розробці ПЗ.
Важливо обирати патерн, який відповідає конкретній задачі, щоб уникнути надмірної складності.




Додаток А
Посилання на відео та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/xoRlZi_mw-A 
Хронологічний опис доповіді:
00:01 -  Початок
00:18 - Що таке патерни?
00:34 - Класифікація патернів
00:41 - Породжувальні патерни
01:12 - Структурні патерни
01:35 - Поведінкові патерни
02:00 - Приклад: Патерн Factory Method
02:27 - Приклад: Патерн Observer
02:52 - Переваги патернів
03:00 - Недоліки патернів
03:08 - Висновки


Додаток Б
Приклад реалізаії патерну Factory Method на Python:

1  class Product:
2      def operation(self):
3          pass
4  
5  class ConcreteProductA(Product):
6      def operation(self):
7          return "Результат продукту A"
8  
9  class ConcreteProductB(Product):
10     def operation(self):
11         return "Результат продукту B"
12 
13 class Creator:
14     def factory_method(self):
15         pass
16 
17     def some_operation(self):
18         product = self.factory_method()
19         return f"Creator: {product.operation()}"
20 
21 class ConcreteCreatorA(Creator):
22     def factory_method(self):
23         return ConcreteProductA()
24 
25 class ConcreteCreatorB(Creator):
26     def factory_method(self):
27         return ConcreteProductB()
28 
29 # Використання
30 creator_a = ConcreteCreatorA()
31 print(creator_a.some_operation())  # Виведе: Creator: Результат продукту A
32 creator_b = ConcreteCreatorB()
33 print(creator_b.some_operation())  # Виведе: Creator: Результат продукту B
